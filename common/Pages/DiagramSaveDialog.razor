@using Syncfusion.Blazor.Popups

@inject IJSRuntime jsRuntime
@namespace MindMap

<SfDialog @ref="@SaveDialog" @bind-Visible="@SaveDialogVisible" AllowDragging="true" Width="335px" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>Save Diagram</Header>
        <Content>
            <div id="saveDialogContent">
                <div class="row">
                    <div class="row">File Name</div><div class="row db-dialog-child-prop-row">
                       <input type="text" id="saveFileName" value="@diagramfileName">
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    <DialogButtons>
        <DialogButton OnClick="@BtnSave" Content="Save" CssClass="e-flat e-db-primary" IsPrimary="true">
        </DialogButton>
        <DialogButton OnClick="@btnCancelClick" Content="Cancel" CssClass="e-flat">
        </DialogButton>
    </DialogButtons>
</SfDialog>

@code {
    /// <summary>
    /// Represents the DiagramMenuBar instance that serves as the parent.
    /// </summary>
    internal DiagramMenuBar Parent;

    /// <summary>
    /// The name of the saved diagram file.
    /// </summary>
    public string diagramfileName = "Diagram1";
    /// <summary>
    /// Represents the SfDialog instance for the save dialog.
    /// </summary>
    public SfDialog SaveDialog;
    /// <summary>
    /// Indicates whether the save dialog is currently visible.
    /// </summary>
    public bool SaveDialogVisible = false;
    /// <summary>
    /// This method is used to save the diagram.
    /// </summary>
    private async Task BtnSave()
    {
        string fileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "save");
        await Parent.Download(fileName);
        await SaveDialog.HideAsync();
    }
    /// <summary>
    /// This method is used to close the diaglog box.
    /// </summary>
    private async Task btnCancelClick()
    {
        await SaveDialog.HideAsync();
    }
}
