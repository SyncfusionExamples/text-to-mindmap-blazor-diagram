@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs

@namespace MindMap

<style>
    #toolbarEditor .e-hscroll-bar{
        overflow-x: initial !important;
       
    }

      .e-toolbar-item {
        width:5px;
    }
  
    .activecss {
        background: #ffffff;
    }
   
    .e-dropdown-popup {
        background-color: #fff;
        color: #111827;
    }
   
</style>
<div class='db-toolbar-editor'>
    <div class='@toolbarClassName'>
       
        <div ID="toolbarEditor" class="e-control e-toolbar e-lib e-keyboard" style="display:@MindmapToolbarVisibility">
            <SfToolbar @ref="@Toolbar" OverflowMode=OverflowMode.Extended>
                <ToolbarEvents Clicked="@ToolbarEditorClick"></ToolbarEvents>
                <ToolbarItems>
                    <ToolbarItem @ref="@UndoItem" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-Undo tb-icons" Align="ItemAlign.Left" TooltipText="Undo" CssClass="tb-item-start tb-item-undo"></ToolbarItem>
                    <ToolbarItem @ref="@RedoItem" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-Redo tb-icons" Align="ItemAlign.Left" TooltipText="Redo" CssClass="tb-item-end tb-item-redo"></ToolbarItem>
                    <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                    <ToolbarItem @ref="@PointerItem" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-Selector tb-icons" Align="ItemAlign.Left" TooltipText="Pointer" CssClass="@PointerItemCssClass"></ToolbarItem>
                    <ToolbarItem @ref="@PanItem" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-Pan tb-icons" Align="ItemAlign.Left" TooltipText="Pan Tool" CssClass="@PanItemCssClass"></ToolbarItem>
                    <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                    <ToolbarItem @ref="@AddChid" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-add-child tb-icons" Align="ItemAlign.Left" TooltipText="Add Child" CssClass="tb-item-start tb-item-child"></ToolbarItem>
                    <ToolbarItem @ref="@AddSibling" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-add-sibling tb-icons" Align="ItemAlign.Left" TooltipText="Add Sibling" CssClass="@addSiblingCssName"></ToolbarItem>
                    <ToolbarItem @ref="@AddMultipleChild" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons sf-icon-multiple-child tb-icons" Align="ItemAlign.Left" TooltipText="Add Multiple Child" CssClass="tb-item-start tb-item-child"></ToolbarItem>
                    <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                    <ToolbarItem @ref="@ZoomItem" ShowTextOn="DisplayMode.Overflow" PrefixIcon="e-icons tb-item-end tb-zoom-dropdown-btn" id="MindMapZoom" Align="ItemAlign.Right">
                        <Template>
                             <SfDropDownButton ID="btnZoomIncrement" @ref="@ZoomItemDropdown" Content="@ZoomItemDropdownContent" CssClass="e-zoomoption e-dropdown-custom">
                                <DropDownButtonEvents ItemSelected="@DrawZoomChange"></DropDownButtonEvents>
                                <DropDownMenuItems>
                                    <DropDownMenuItem Text="Zoom In"></DropDownMenuItem>
                                    <DropDownMenuItem Text="Zoom Out"></DropDownMenuItem>
                                    <DropDownMenuItem Text="Zoom to Fit"></DropDownMenuItem>
                                    <DropDownMenuItem Text="Zoom to 50%"></DropDownMenuItem>
                                    <DropDownMenuItem Text="Zoom to 100%"></DropDownMenuItem>
                                    <DropDownMenuItem Text="Zoom to 200%"></DropDownMenuItem>
                                </DropDownMenuItems>
                            </SfDropDownButton>

                            <div class=@HideButtonCss style="background-color: @HideButtonBackground;margin-left:12px;margin-top:-2px;min-width:30px;min-height:20px;border-color:transparent">
                                <SfButton ID="btnHideProperty" IconCss="sf-icon-properties tb-hide-button tb-icons" OnClick="@HidePropertyContainer"></SfButton>
                          </div>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </div>
      </div>
    
</div>

@code {
    /// <summary>
    /// Represents the DiagramMain instance that serves as the parent.
    /// </summary>
    internal DiagramMain Parent;
    /// <summary>
    /// The background color for the hide button.
    /// </summary>
    string HideButtonBackground = "#0078d4";
    /// <summary>
    /// The CSS class for the hide button.
    /// </summary>
    string HideButtonCss = "db-toolbar-hide-btn tb-property-open";
    /// <summary>
    /// The SfToolbar instance for the toolbar.
    /// </summary>
    SfToolbar Toolbar;
    /// <summary>
    /// The CSS class name for the toolbar container.
    /// </summary>
    string toolbarClassName { get; set; } = "db-toolbar-container";
    /// <summary>
    /// The CSS class name for adding a sibling tool bar item.
    /// </summary>
    string addSiblingCssName { get; set; } = "tb-item-start tb-item-sibling";
    /// <summary>
    /// The CSS class for the menu hide icon.
    /// </summary>
    string MenuHideIconCss = "sf-icon-Collapse tb-icons";
    /// <summary>
    /// Represents a toolbar item for undo functionality.
    /// </summary>
    ToolbarItem UndoItem;
    /// <summary>
    /// Represents a toolbar item for redo functionality.
    /// </summary>
    ToolbarItem RedoItem;
    /// <summary>
    /// Represents a toolbar item for zoom functionality.
    /// </summary>
    ToolbarItem ZoomItem;
    /// <summary>
    /// The SfDropDownButton instance for the zoom item dropdown.
    /// </summary>
    SfDropDownButton ZoomItemDropdown;

    /// <summary>
    /// Represents a toolbar item for pan functionality.
    /// </summary>
    ToolbarItem PanItem;
    /// <summary>
    /// Represents a toolbar item for pan functionality.
    /// </summary>
    ToolbarItem AddChid;
    /// <summary>
    /// Represents a toolbar item for adding a sibling.
    /// </summary>
    ToolbarItem AddSibling;
    /// <summary>
    /// Represents a toolbar item for adding multiple children.
    /// </summary>
    ToolbarItem AddMultipleChild;
    /// <summary>
    /// Represents a toolbar item for pointer functionality.
    /// </summary>
    ToolbarItem PointerItem;
    /// <summary>
    /// The CSS class for the pan item.
    /// </summary>
    public string PanItemCssClass = "tb-item-start tb-item-pan";
    /// <summary>
    /// The CSS class for the pointer item.
    /// </summary>
    public string PointerItemCssClass = "tb-item-middle tb-item-selected tb-item-pointer";
    /// <summary>
    /// Specifies whether the check box option is checked.
    /// </summary>
    public string stringChecked { get; set; } = "diagramView";
    /// <summary>
    /// The visibility setting for the mind map toolbar.
    /// </summary>
    public string MindmapToolbarVisibility { get; set; } = "none";
    /// <summary>
    /// The SfDropDownButton instance for the dropdown button.
    /// </summary>
    private SfDropDownButton dropdownBtn;
    /// <summary>
    /// The SfDropDownButton instance for the another dropdown button.
    /// </summary>
    private SfDropDownButton dropdownBtn1;
    /// <summary>
    /// The content of the ZoomItemDropdown.
    /// </summary>
    public string ZoomItemDropdownContent = "100%";
    string showShortCut;
    /// <summary>
    /// This method is used to display the treeview nodes.
    /// </summary>
    public  void DisplayTreeViewNode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        showShortCut = Parent.ShowShortCutKey;
        stringChecked = "treeView";
        Parent.DiagramContent.Diagram.ClearSelection();
        Parent.DiagramContent.DisplayTreeViewNodes = "block";
        Parent.DiagramContent.DisplayDiagramNodes = "none";
        Parent.ShowShortCutKey = "none";
        Parent.Toolbar.StateHasChanged();
        Parent.StateChanged();
        Parent.DiagramContent.StateChanged();
       
    }
    /// <summary>
    /// This method is used to display the diagram nodes.
    /// </summary>
    public async void DisplayDiagramViewNode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        stringChecked = "diagramView";
        Parent.DiagramContent.DisplayTreeViewNodes = "none";
        Parent.DiagramContent.DisplayDiagramNodes = "block";
        await Parent.DiagramContent.Diagram.DoLayout();
        Parent.ShowShortCutKey = showShortCut;
        Parent.StateChanged();
        Parent.DiagramContent.StateChanged();
        StateChanged();
    }
    /// <summary>
    /// Method invoked after each time the component has been rendered.
    /// </summary>
    protected override void OnAfterRender(bool firstRender)
    {
        ZoomItemDropdownContent = FormattableString.Invariant($"{Math.Round(Parent.DiagramContent.CurrentZoom * 100)}") + "%";
        base.OnAfterRender(firstRender);
    }

    /// <summary>
    /// Opens/closes a DropDownButton popup based on current state of the DropDownButton.
    /// </summary>
    private void ClickHandler(BeforeOpenCloseEventArgs e)
    {
        dropdownBtn.Toggle();
    }
    /// <summary> 
    /// Opens/closes a DropDownButton popup based on current state of the DropDownButton. 
    /// </summary> 
    private void ClickHandler1(BeforeOpenCloseEventArgs e)
    {
        dropdownBtn1.Toggle();
    }
    /// <summary>
    /// This method is used to update refresh the toolbar items.
    /// </summary>
    public void StateChanged()
    {
        StateHasChanged();
    }
}
